#!/bin/bash
# Episode 18: Penetration Testing ‚Äî –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã
# Type B (Manual Pentesting) ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ deliverables, –Ω–µ bash —Å–∫—Ä–∏–ø—Ç–æ–≤

set -e

EPISODE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
TEST_PASSED=0
TEST_FAILED=0
VERBOSE="${VERBOSE:-0}"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
    ((TEST_PASSED++))
}

log_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

log_error() {
    echo -e "${RED}[‚úó]${NC} $1"
    ((TEST_FAILED++))
}

# Header
echo "=============================================="
echo "Episode 18: Penetration Testing ‚Äî Tests"
echo "Type: Manual Pentesting (Type B)"
echo "=============================================="
echo ""

# Test 1: Pentest –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö pentest tools..."

tools=("burpsuite" "sqlmap" "hydra" "john")
tools_installed=0

for tool in "${tools[@]}"; do
    if command -v "$tool" &> /dev/null; then
        log_success "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç $tool —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        ((tools_installed++))
    else
        log_warning "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç $tool –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
    fi
done

if [[ $tools_installed -ge 2 ]]; then
    log_success "Minimum 2 pentest –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    log_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (burpsuite, sqlmap, hydra)"
fi

echo ""

# Test 2: Vulnerable app —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è vulnerable app..."

if [[ -f "$EPISODE_DIR/artifacts/vulnerable_app/index.php" ]]; then
    log_success "Vulnerable app –Ω–∞–π–¥–µ–Ω"
else
    log_error "Vulnerable app –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ artifacts/vulnerable_app/"
fi

echo ""

# Test 3: Pentest –æ—Ç—á—ë—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ pentest –æ—Ç—á—ë—Ç–∞..."

REPORT_LOCATIONS=(
    "$HOME/episode18-pentest-report.md"
    "$EPISODE_DIR/pentest_report.md"
    "$HOME/pentest-report.md"
)

report_found=0
for report_path in "${REPORT_LOCATIONS[@]}"; do
    if [[ -f "$report_path" ]]; then
        log_success "Pentest –æ—Ç—á—ë—Ç –Ω–∞–π–¥–µ–Ω: $report_path"
        report_found=1
        REPORT_FILE="$report_path"
        break
    fi
done

if [[ $report_found -eq 0 ]]; then
    log_error "Pentest –æ—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ ~/episode18-pentest-report.md"
else
    # Test 4: –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç—á—ë—Ç–∞
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç—á—ë—Ç–∞..."
    
    report_lines=$(wc -l < "$REPORT_FILE")
    if [[ $report_lines -ge 50 ]]; then
        log_success "–û—Ç—á—ë—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π ($report_lines —Å—Ç—Ä–æ–∫)"
    else
        log_warning "–û—Ç—á—ë—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ($report_lines —Å—Ç—Ä–æ–∫). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 50 —Å—Ç—Ä–æ–∫."
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–µ–∫—Ü–∏–π
    if grep -q "Executive Summary" "$REPORT_FILE"; then
        log_success "–°–µ–∫—Ü–∏—è 'Executive Summary' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    else
        log_warning "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'Executive Summary'"
    fi
    
    if grep -q "SQL Injection\|SQLi\|sql injection" "$REPORT_FILE"; then
        log_success "SQL Injection documented"
    else
        log_warning "SQL Injection –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—á—ë—Ç–µ"
    fi
    
    if grep -q "Remediation\|–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" "$REPORT_FILE"; then
        log_success "Remediation recommendations –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    else
        log_warning "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç remediation —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    fi
fi

echo ""

# Test 5: Wordlists —Å—É—â–µ—Å—Ç–≤—É—é—Ç
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ wordlists..."

if [[ -f "$EPISODE_DIR/artifacts/wordlists/common_passwords.txt" ]]; then
    log_success "Wordlists –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
else
    log_warning "Wordlists –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å)"
fi

echo ""

# Test 6: Ethical considerations
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ ethical considerations..."

if [[ $report_found -eq 1 ]]; then
    if grep -qi "ethical\|authorized\|permission" "$REPORT_FILE"; then
        log_success "Ethical considerations —É–ø–æ–º—è–Ω—É—Ç—ã –≤ –æ—Ç—á—ë—Ç–µ"
    else
        log_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ø–æ–º—è–Ω—É—Ç—å ethical aspects –∏ authorization"
    fi
fi

echo ""

# Test 7: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."

required_dirs=(
    "artifacts"
    "starter"
    "solution"
    "tests"
)

for dir in "${required_dirs[@]}"; do
    if [[ -d "$EPISODE_DIR/$dir" ]]; then
        log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        log_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
done

echo ""

# Summary
echo "=============================================="
echo "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:"
echo "=============================================="
echo -e "${GREEN}Passed:${NC} $TEST_PASSED"
echo -e "${RED}Failed:${NC} $TEST_FAILED"
echo ""

if [[ $TEST_FAILED -eq 0 ]]; then
    echo -e "${GREEN}‚úì Episode 18 COMPLETE!${NC}"
    echo ""
    echo "üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ—Å–Ω–æ–≤—ã penetration testing!"
    echo ""
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –æ—Ç—á—ë—Ç:"
    if [[ -n "${REPORT_FILE:-}" ]]; then
        echo "  cat $REPORT_FILE"
    fi
    echo ""
    echo "–°–ª–µ–¥—É—é—â–∏–π —ç–ø–∏–∑–æ–¥:"
    echo "  Episode 19: Incident Response & Forensics"
    echo ""
    exit 0
else
    echo -e "${RED}‚úó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏${NC}"
    echo ""
    echo "–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:"
    if [[ $report_found -eq 0 ]]; then
        echo "  1. –°–æ–∑–¥–∞–π—Ç–µ pentest –æ—Ç—á—ë—Ç: ~/episode18-pentest-report.md"
        echo "     –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω: starter/pentest_report_template.md"
    fi
    if [[ $tools_installed -lt 2 ]]; then
        echo "  2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pentest –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:"
        echo "     sudo apt install burpsuite sqlmap hydra"
    fi
    echo ""
    echo "–°–ø—Ä–∞–≤–∫–∞: cat README.md"
    exit 1
fi

