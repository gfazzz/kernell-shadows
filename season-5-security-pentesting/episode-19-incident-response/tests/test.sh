#!/bin/bash
# Episode 19: Incident Response & Forensics ‚Äî –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã
# Type B (Configuration) ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ SIEM setup –∏ forensic deliverables

set -e

EPISODE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
TEST_PASSED=0
TEST_FAILED=0

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
    ((TEST_PASSED++))
}

log_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

log_error() {
    echo -e "${RED}[‚úó]${NC} $1"
    ((TEST_FAILED++))
}

# Header
echo "=============================================="
echo "Episode 19: Incident Response ‚Äî Tests"
echo "Type: Configuration (Type B)"
echo "=============================================="
echo ""

# Test 1: Auditd rules
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ auditd configuration..."

AUDIT_LOCATIONS=(
    "/etc/audit/rules.d/incident-response.rules"
    "/etc/audit/rules.d/audit.rules"
    "$HOME/audit.rules"
)

audit_found=0
for audit_file in "${AUDIT_LOCATIONS[@]}"; do
    if [[ -f "$audit_file" ]]; then
        log_success "Auditd rules –Ω–∞–π–¥–µ–Ω—ã: $audit_file"
        audit_found=1
        
        # Check for key rules
        if grep -q "tmp_activity\|passwd_changes\|kernel_modules" "$audit_file"; then
            log_success "Essential audit rules –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        else
            log_warning "Audit rules —Å–ª–∏—à–∫–æ–º –±–∞–∑–æ–≤—ã–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ"
        fi
        break
    fi
done

if [[ $audit_found -eq 0 ]]; then
    log_error "Auditd rules –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏"
fi

echo ""

# Test 2: ELK Stack (optional check)
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ ELK Stack (optional)..."

if command -v curl &> /dev/null; then
    if curl -s http://localhost:9200 &> /dev/null; then
        log_success "Elasticsearch —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "Elasticsearch –Ω–µ –∑–∞–ø—É—â–µ–Ω (optional –¥–ª—è Episode 19)"
    fi
    
    if curl -s http://localhost:5601 &> /dev/null; then
        log_success "Kibana —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "Kibana –Ω–µ –∑–∞–ø—É—â–µ–Ω (optional)"
    fi
else
    log_warning "curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ELK –ø—Ä–æ–≤–µ—Ä–∫—É"
fi

echo ""

# Test 3: Osquery
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ osquery..."

if command -v osqueryi &> /dev/null; then
    log_success "Osquery —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    # Check config
    if [[ -f "/etc/osquery/osquery.conf" ]]; then
        log_success "Osquery config –Ω–∞–π–¥–µ–Ω"
    else
        log_warning "Osquery config –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ /etc/osquery/"
    fi
else
    log_warning "Osquery –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
fi

echo ""

# Test 4: Log analysis / Timeline
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ log analysis –∏ timeline..."

TIMELINE_LOCATIONS=(
    "$HOME/incident_timeline.csv"
    "$HOME/incident_timeline.txt"
    "$HOME/incident_timeline_sorted.csv"
    "$HOME/forensic_timeline.csv"
)

timeline_found=0
for timeline_file in "${TIMELINE_LOCATIONS[@]}"; do
    if [[ -f "$timeline_file" ]]; then
        log_success "Timeline –Ω–∞–π–¥–µ–Ω: $timeline_file"
        timeline_found=1
        
        lines=$(wc -l < "$timeline_file")
        if [[ $lines -ge 10 ]]; then
            log_success "Timeline —Å–æ–¥–µ—Ä–∂–∏—Ç $lines events (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)"
        else
            log_warning "Timeline —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ($lines events)"
        fi
        break
    fi
done

if [[ $timeline_found -eq 0 ]]; then
    log_warning "Timeline –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å timeline –∞—Ç–∞–∫–∏"
fi

echo ""

# Test 5: Forensic Report
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ forensic report..."

REPORT_LOCATIONS=(
    "$HOME/incident_forensic_report.md"
    "$HOME/forensic_report.md"
    "$HOME/incident_report.md"
)

report_found=0
for report_file in "${REPORT_LOCATIONS[@]}"; do
    if [[ -f "$report_file" ]]; then
        log_success "Forensic report –Ω–∞–π–¥–µ–Ω: $report_file"
        report_found=1
        
        report_lines=$(wc -l < "$report_file")
        if [[ $report_lines -ge 50 ]]; then
            log_success "Report –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π ($report_lines —Å—Ç—Ä–æ–∫)"
        else
            log_warning "Report —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ($report_lines —Å—Ç—Ä–æ–∫)"
        fi
        
        # Check key sections
        if grep -qi "timeline\|evidence\|impact" "$report_file"; then
            log_success "Key sections –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç (timeline/evidence/impact)"
        else
            log_warning "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–µ–∫—Ü–∏–∏"
        fi
        break
    fi
done

if [[ $report_found -eq 0 ]]; then
    log_error "Forensic report –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ incident_forensic_report.md"
fi

echo ""

# Test 6: Artifact Analysis
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ artifacts..."

if [[ -f "$EPISODE_DIR/artifacts/compromised_logs/auth.log" ]]; then
    log_success "Artifacts –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    
    # Check if student analyzed suspicious IP
    if grep -q "185.220.101.47" "$EPISODE_DIR/artifacts/compromised_logs/auth.log"; then
        log_success "Suspicious IP (185.220.101.47) –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ª–æ–≥–∞—Ö"
    fi
else
    log_error "Artifacts –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

echo ""

# Test 7: Evidence Understanding
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è evidence..."

EVIDENCE_KEYWORDS=(
    "backdoor"
    "rootkit"
    "exfiltration"
    "C2"
    "privilege escalation"
)

if [[ $report_found -eq 1 ]]; then
    evidence_count=0
    for keyword in "${EVIDENCE_KEYWORDS[@]}"; do
        if grep -qi "$keyword" "$report_file"; then
            ((evidence_count++))
        fi
    done
    
    if [[ $evidence_count -ge 3 ]]; then
        log_success "Forensic evidence keywords –Ω–∞–π–¥–µ–Ω—ã ($evidence_count/5)"
    else
        log_warning "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ forensic evidence –≤ –æ—Ç—á—ë—Ç–µ ($evidence_count/5)"
    fi
fi

echo ""

# Test 8: Chain of Custody Awareness
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Chain of Custody awareness..."

if [[ $report_found -eq 1 ]]; then
    if grep -qi "chain of custody\|evidence\|hash\|md5\|sha256" "$report_file"; then
        log_success "Chain of custody / evidence integrity —É–ø–æ–º—è–Ω—É—Ç—ã"
    else
        log_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ø–æ–º—è–Ω—É—Ç—å chain of custody –∏ hashes"
    fi
fi

echo ""

# Summary
echo "=============================================="
echo "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:"
echo "=============================================="
echo -e "${GREEN}Passed:${NC} $TEST_PASSED"
echo -e "${RED}Failed:${NC} $TEST_FAILED"
echo ""

if [[ $TEST_FAILED -eq 0 ]]; then
    echo -e "${GREEN}‚úì Episode 19 COMPLETE!${NC}"
    echo ""
    echo "üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ Incident Response & Forensics!"
    echo ""
    echo "–ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:"
    echo "  ‚úÖ APT attack —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω"
    echo "  ‚úÖ SIEM –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    echo "  ‚úÖ Timeline –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    echo "  ‚úÖ Forensic report –Ω–∞–ø–∏—Å–∞–Ω"
    echo ""
    if [[ -n "${report_file:-}" ]]; then
        echo "–í–∞—à forensic report:"
        echo "  cat $report_file"
        echo ""
    fi
    echo "–°–ª–µ–¥—É—é—â–∏–π —ç–ø–∏–∑–æ–¥:"
    echo "  Episode 20: Security Hardening & Best Practices"
    echo ""
    exit 0
else
    echo -e "${RED}‚úó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏${NC}"
    echo ""
    echo "–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:"
    if [[ $audit_found -eq 0 ]]; then
        echo "  1. –°–æ–∑–¥–∞–π—Ç–µ auditd rules (—Å–º. starter/audit.rules.example)"
    fi
    if [[ $timeline_found -eq 0 ]]; then
        echo "  2. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ timeline –∞—Ç–∞–∫–∏ –∏–∑ –ª–æ–≥–æ–≤"
    fi
    if [[ $report_found -eq 0 ]]; then
        echo "  3. –ù–∞–ø–∏—à–∏—Ç–µ forensic report (—Å–º. README.md –¶–∏–∫–ª 8)"
    fi
    echo ""
    echo "–°–ø—Ä–∞–≤–∫–∞: cat README.md"
    exit 1
fi

