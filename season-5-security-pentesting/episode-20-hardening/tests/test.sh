#!/bin/bash

# Episode 20: Security Hardening & Best Practices
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ hardening

EPISODE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
PASS=0
FAIL=0

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "=========================================="
echo "Episode 20: Security Hardening - Tests"
echo "=========================================="
echo ""

# Helper functions
pass() {
    echo -e "${GREEN}‚úì${NC} $1"
    ((PASS++))
}

fail() {
    echo -e "${RED}‚úó${NC} $1"
    ((FAIL++))
}

warn() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

## Test 1: README exists
echo "Test 1: Documentation"
if [[ -f "$EPISODE_DIR/README.md" ]]; then
    lines=$(wc -l < "$EPISODE_DIR/README.md")
    if [[ $lines -gt 1500 ]]; then
        pass "README.md exists ($lines lines)"
    else
        fail "README.md too short ($lines lines, expected >1500)"
    fi
else
    fail "README.md not found"
fi

## Test 2: Artifacts
echo ""
echo "Test 2: Artifacts"
if [[ -f "$EPISODE_DIR/artifacts/baseline_audit/lynis_baseline.txt" ]]; then
    pass "Baseline audit exists"
else
    fail "Baseline audit missing"
fi

if [[ -f "$EPISODE_DIR/artifacts/cis_benchmarks/cis_checklist.md" ]]; then
    pass "CIS checklist exists"
else
    fail "CIS checklist missing"
fi

## Test 3: Starter templates
echo ""
echo "Test 3: Starter Templates"

if [[ -f "$EPISODE_DIR/starter/sysctl-hardening.conf.example" ]]; then
    pass "sysctl template exists"
else
    fail "sysctl template missing"
fi

if [[ -f "$EPISODE_DIR/starter/apparmor/usr.sbin.apache2" ]]; then
    pass "AppArmor template exists"
else
    fail "AppArmor template missing"
fi

if [[ -f "$EPISODE_DIR/starter/service-configs/sshd_config.hardened" ]]; then
    pass "SSH config template exists"
else
    fail "SSH config template missing"
fi

if [[ -f "$EPISODE_DIR/starter/ansible/hardening-playbook.yml" ]]; then
    pass "Ansible playbook exists"
else
    fail "Ansible playbook missing"
fi

## Test 4: Solution configs
echo ""
echo "Test 4: Solution Configurations"

if [[ -f "$EPISODE_DIR/solution/sysctl.d/99-hardening.conf" ]]; then
    # Check sysctl parameters count
    params=$(grep -cE "^[a-z]" "$EPISODE_DIR/solution/sysctl.d/99-hardening.conf" || true)
    if [[ $params -ge 20 ]]; then
        pass "sysctl hardening config ($params parameters)"
    else
        fail "sysctl config insufficient ($params parameters, expected ‚â•20)"
    fi
else
    fail "sysctl hardening config missing"
fi

if [[ -f "$EPISODE_DIR/solution/apparmor/profiles/usr.sbin.apache2" ]]; then
    pass "Production AppArmor profile exists"
else
    fail "Production AppArmor profile missing"
fi

if [[ -f "$EPISODE_DIR/solution/hardening_report.md" ]]; then
    pass "Hardening report exists"
else
    fail "Hardening report missing"
fi

## Test 5: Student hardening (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω—ë–Ω)
echo ""
echo "Test 5: Applied Hardening (if configured)"

if [[ -f "/etc/sysctl.d/99-hardening.conf" ]]; then
    pass "Student applied sysctl hardening"
    
    # Check if loaded
    if sysctl kernel.randomize_va_space 2>/dev/null | grep -q "= 2"; then
        pass "ASLR enabled (kernel.randomize_va_space=2)"
    else
        warn "ASLR not configured or not set to 2"
    fi
else
    warn "Student sysctl config not applied (optional)"
fi

if command -v ufw &>/dev/null; then
    if sudo ufw status 2>/dev/null | grep -q "Status: active"; then
        pass "UFW firewall enabled"
    else
        warn "UFW installed but not enabled (optional)"
    fi
else
    warn "UFW not installed (optional)"
fi

if sudo aa-status &>/dev/null; then
    profiles=$(sudo aa-status 2>/dev/null | grep "profiles are loaded" | grep -oE "[0-9]+" | head -1 || echo "0")
    if [[ $profiles -gt 0 ]]; then
        pass "AppArmor active ($profiles profiles loaded)"
    else
        warn "AppArmor installed but no profiles loaded"
    fi
else
    warn "AppArmor status check failed (may need sudo)"
fi

## Test 6: Configuration validation
echo ""
echo "Test 6: Configuration Quality"

# Check SSH config for security
if [[ -f "$EPISODE_DIR/starter/service-configs/sshd_config.hardened" ]]; then
    config="$EPISODE_DIR/starter/service-configs/sshd_config.hardened"
    
    if grep -q "^PermitRootLogin no" "$config"; then
        pass "SSH: PermitRootLogin disabled"
    else
        fail "SSH: PermitRootLogin should be 'no'"
    fi
    
    if grep -q "^PasswordAuthentication no" "$config"; then
        pass "SSH: Password auth disabled"
    else
        fail "SSH: PasswordAuthentication should be 'no'"
    fi
    
    if grep -q "^PubkeyAuthentication yes" "$config"; then
        pass "SSH: Public key auth enabled"
    else
        fail "SSH: PubkeyAuthentication should be 'yes'"
    fi
fi

# Check sysctl for critical parameters
if [[ -f "$EPISODE_DIR/solution/sysctl.d/99-hardening.conf" ]]; then
    config="$EPISODE_DIR/solution/sysctl.d/99-hardening.conf"
    
    if grep -q "kernel.randomize_va_space = 2" "$config"; then
        pass "Kernel: ASLR enabled"
    else
        fail "Kernel: ASLR should be enabled (=2)"
    fi
    
    if grep -q "net.ipv4.tcp_syncookies = 1" "$config"; then
        pass "Network: SYN cookies enabled"
    else
        fail "Network: SYN cookies should be enabled"
    fi
    
    if grep -q "net.ipv4.ip_forward = 0" "$config"; then
        pass "Network: IP forwarding disabled"
    else
        fail "Network: IP forwarding should be disabled"
    fi
fi

## Test 7: Ansible playbook syntax
echo ""
echo "Test 7: Automation"

if [[ -f "$EPISODE_DIR/starter/ansible/hardening-playbook.yml" ]]; then
    if command -v ansible-playbook &>/dev/null; then
        if ansible-playbook --syntax-check "$EPISODE_DIR/starter/ansible/hardening-playbook.yml" &>/dev/null; then
            pass "Ansible playbook syntax valid"
        else
            fail "Ansible playbook has syntax errors"
        fi
    else
        warn "Ansible not installed, skipping playbook validation"
    fi
fi

## Summary
echo ""
echo "=========================================="
echo "Test Summary"
echo "=========================================="
echo -e "${GREEN}Passed:${NC} $PASS"
echo -e "${RED}Failed:${NC} $FAIL"

if [[ $FAIL -eq 0 ]]; then
    echo ""
    echo -e "${GREEN}‚úì All tests passed!${NC}"
    echo ""
    echo "Episode 20 COMPLETE! üéâ"
    echo ""
    echo "Hardening index theoretical score based on configs:"
    echo "  Baseline:  68/100"
    echo "  Expected:  90+/100 (with full deployment)"
    echo ""
    echo "Next steps:"
    echo "  1. Review solution/ for production configs"
    echo "  2. Deploy using Ansible to real infrastructure"
    echo "  3. Verify with: sudo lynis audit system"
    echo "  4. Conduct red team testing"
    echo ""
    echo "Season 5 COMPLETE! üèÜ"
    echo ""
    exit 0
else
    echo ""
    echo -e "${RED}‚úó Some tests failed${NC}"
    echo "Review the output above and fix issues"
    exit 1
fi
