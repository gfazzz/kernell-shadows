[Unit]
# KERNEL SHADOWS: Episode 10 — Backup Timer (Scheduler)
# Saint Petersburg, Russia
#
# TODO 1: Добавь Description для timer
# Подсказка: Description=KERNEL SHADOWS Backup Timer (Daily at 2 AM)
Description=???

# TODO 2: Добавь документацию
# Подсказка: Documentation=https://github.com/kernel-shadows/episode-10
Documentation=???

# TODO 3: Настрой зависимости (After/Requires)
# Подсказка: Timer требует точного времени (time-sync.target)
# After=time-sync.target (запускаться после синхронизации времени)
# Requires=time-sync.target (требует наличия синхронизации времени)
After=???
Requires=???

[Timer]
# ============================================================================
# Timer Configuration
# ============================================================================

# TODO 4: Установи расписание — ежедневно в 2:00 AM
# Подсказка: OnCalendar=*-*-* 02:00:00
#
# ФОРМАТ OnCalendar:
# *-*-* HH:MM:SS = год-месяц-день час:минута:секунда
#
# ПРИМЕРЫ:
# OnCalendar=daily             → каждый день в 00:00
# OnCalendar=hourly            → каждый час в :00
# OnCalendar=weekly            → каждый понедельник в 00:00
# OnCalendar=*-*-* 02:00:00    → каждый день в 02:00
# OnCalendar=Mon *-*-* 09:00   → каждый понедельник в 09:00
# OnCalendar=*-*-01 03:00      → 1-е число каждого месяца в 03:00
OnCalendar=???

# TODO 5: Добавь рандомизацию запуска (±15 минут)
# Подсказка: RandomizedDelaySec=15min
# Зачем? Если 100 серверов запустят backup ровно в 02:00, 
# это создаст одновременную нагрузку. RandomizedDelaySec распределяет запуск.
RandomizedDelaySec=???

# TODO 6: Включи Persistent mode
# Подсказка: Persistent=true
# Зачем? Если сервер был выключен в 02:00, timer запустит backup
# при следующем включении (не пропустит выполнение).
Persistent=???

# ============================================================================
# Service to Trigger
# ============================================================================

# TODO 7: Укажи какой сервис запускать
# Подсказка: Unit=shadow-backup.service
# Когда timer сработает, он запустит этот service
Unit=???

[Install]
# TODO 8: Добавь в цель для автозапуска
# Подсказка: WantedBy=timers.target
# timers.target — специальная цель для всех systemd timers
WantedBy=???

# ============================================================================
# СПРАВКА: Как использовать после заполнения TODO
#
# 1. Скопировать в systemd:
#    sudo cp shadow-backup.timer /etc/systemd/system/
#
# 2. Reload systemd:
#    sudo systemctl daemon-reload
#
# 3. Enable timer (запуск при загрузке):
#    sudo systemctl enable shadow-backup.timer
#
# 4. Start timer сейчас:
#    sudo systemctl start shadow-backup.timer
#
# 5. Проверка статуса:
#    sudo systemctl status shadow-backup.timer
#
# 6. Список всех timers:
#    sudo systemctl list-timers --all
#
# 7. Увидеть когда следующий запуск:
#    sudo systemctl list-timers shadow-backup.timer
#
# 8. Ручной запуск backup (тест, без ожидания timer):
#    sudo systemctl start shadow-backup.service
#
# 9. Просмотр логов backup:
#    sudo journalctl -u shadow-backup.service -f
#
# 10. Остановить timer:
#     sudo systemctl stop shadow-backup.timer
#
# 11. Отключить автозапуск:
#     sudo systemctl disable shadow-backup.timer
#
# ============================================================================
# TIMER vs CRON — В чём разница?
#
# CRON (старый способ):
# ┌────────── минута (0 - 59)
# │ ┌──────── час (0 - 23)
# │ │ ┌────── день месяца (1 - 31)
# │ │ │ ┌──── месяц (1 - 12)
# │ │ │ │ ┌── день недели (0 - 6, где 0=воскресенье)
# │ │ │ │ │
# 0 2 * * * /usr/local/bin/backup.sh
#
# ПРЕИМУЩЕСТВА CRON:
# ✓ Простой синтаксис
# ✓ Все знают как использовать
#
# НЕДОСТАТКИ CRON:
# ✗ Нет управления зависимостями (может запуститься до готовности сети)
# ✗ Нет интеграции с journalctl (логи в отдельных файлах)
# ✗ Нет ограничений ресурсов
# ✗ Если сервер выключен — задача пропущена навсегда
#
# ---
#
# SYSTEMD TIMER (современный способ):
#
# ПРЕИМУЩЕСТВА:
# ✓ Управление зависимостями (After=, Requires=)
# ✓ Интегрированное логирование (journalctl)
# ✓ Ограничения ресурсов (CPUQuota, MemoryLimit)
# ✓ Persistent=true — не пропускает задачи
# ✓ RandomizedDelaySec — распределение нагрузки
# ✓ Проще отладка (systemctl status, systemctl list-timers)
#
# НЕДОСТАТКИ:
# ✗ Более сложный синтаксис
# ✗ Требует два файла (.service + .timer)
#
# Борис: "Для современных систем — timers > cron. 
#         Лучшая интеграция, больше возможностей."
#
# ============================================================================
# OnCalendar — Полная шпаргалка
#
# КАЖДУЮ МИНУТУ:
# OnCalendar=*-*-* *:*:00
#
# КАЖДЫЙ ЧАС:
# OnCalendar=hourly              # в :00
# OnCalendar=*-*-* *:15:00       # в :15
# OnCalendar=*-*-* *:00,30:00    # в :00 и :30
#
# КАЖДЫЙ ДЕНЬ:
# OnCalendar=daily               # в 00:00
# OnCalendar=*-*-* 02:30:00      # в 02:30
# OnCalendar=*-*-* 02,14:00      # в 02:00 и 14:00
#
# КАЖДУЮ НЕДЕЛЮ:
# OnCalendar=weekly              # понедельник 00:00
# OnCalendar=Mon *-*-* 02:00     # понедельник 02:00
# OnCalendar=Fri *-*-* 18:00     # пятница 18:00
# OnCalendar=Mon-Fri *-*-* 09:00 # будни 09:00
# OnCalendar=Sat,Sun *-*-* 12:00 # выходные 12:00
#
# КАЖДЫЙ МЕСЯЦ:
# OnCalendar=monthly             # 1-е число 00:00
# OnCalendar=*-*-01 02:00        # 1-е число 02:00
# OnCalendar=*-*-15 02:00        # 15-е число 02:00
# OnCalendar=*-*-01,15 02:00     # 1-е и 15-е число
#
# ПРОВЕРКА СИНТАКСИСА:
# systemd-analyze calendar "Mon *-*-* 02:00"
# → выведет когда следующий запуск
#
# ============================================================================
# ВОПРОСЫ ДЛЯ ПОНИМАНИЯ:
#
# 1. Зачем нужен RandomizedDelaySec?
#    → Распределяет нагрузку на сервере
#    → Предотвращает одновременный запуск 100+ backup задач
#
# 2. Что делает Persistent=true?
#    → Если сервер был выключен, timer запустит задачу после включения
#    → Не пропустит выполнение
#
# 3. В чём разница между After и Requires?
#    → After: запускаться ПОСЛЕ указанной цели (порядок)
#    → Requires: ТРЕБУЕТ наличия цели (зависимость)
#
# 4. Можно ли использовать несколько OnCalendar?
#    → Да! Например:
#      OnCalendar=Mon-Fri *-*-* 09:00  # будни
#      OnCalendar=Sat,Sun *-*-* 12:00  # выходные
#
# 5. Как протестировать timer не дожидаясь 02:00?
#    → sudo systemctl start shadow-backup.service (ручной запуск сервиса)
#    → Изменить OnCalendar на ближайшее время (например, через 2 минуты)
#
# ============================================================================
# Борис: "Timer + Service = cron done right.
#         Зависимости, логирование, ограничения ресурсов. SystemD power."
# ============================================================================

