---
# KERNEL SHADOWS: Episode 16 — Ansible & Infrastructure as Code
# Main Playbook for Operation Shadow Infrastructure
# Amsterdam → Berlin (Day 31-32)
# Klaus Schmidt, Ansible Architect
#
# "50 servers, one command, 3 minutes. That's Infrastructure as Code."

################################################################################
# Play 1: Configure ALL Production Servers (Common Setup)
################################################################################

- name: Configure operation-shadow servers (Common setup)
  hosts: production
  become: yes
  gather_facts: yes

  roles:
    - common

  tags:
    - common
    - baseline

################################################################################
# Play 2: Configure Web Servers
################################################################################

- name: Configure web servers
  hosts: web
  become: yes

  roles:
    - nginx

  tasks:
    - name: Deploy web application
      copy:
        src: files/web-app/
        dest: /var/www/html/
        owner: www-data
        group: www-data
        mode: '0755'
      notify: restart nginx

    - name: Ensure nginx is running
      service:
        name: nginx
        state: started
        enabled: yes

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

  tags:
    - web
    - nginx

################################################################################
# Play 3: Configure Database Servers
################################################################################

- name: Configure database servers
  hosts: database
  become: yes

  roles:
    - postgresql

  tasks:
    - name: Create application database
      postgresql_db:
        name: "{{ app_database_name }}"
        state: present
      become_user: postgres

    - name: Create database user
      postgresql_user:
        name: "{{ app_database_user }}"
        password: "{{ app_database_password }}"
        db: "{{ app_database_name }}"
        priv: ALL
        state: present
      become_user: postgres

    - name: Enable automated backups
      cron:
        name: "PostgreSQL backup"
        minute: "0"
        hour: "2"
        job: "/usr/local/bin/pg_backup.sh"
        user: postgres

  tags:
    - database
    - postgres

################################################################################
# Play 4: Configure Cache Servers
################################################################################

- name: Configure cache servers
  hosts: cache
  become: yes

  roles:
    - redis

  tasks:
    - name: Configure Redis maxmemory
      lineinfile:
        path: /etc/redis/redis.conf
        regexp: '^maxmemory '
        line: 'maxmemory {{ redis_maxmemory }}'
      notify: restart redis

    - name: Configure Redis persistence
      lineinfile:
        path: /etc/redis/redis.conf
        regexp: '^save '
        line: 'save 900 1'
      notify: restart redis

    - name: Ensure Redis is running
      service:
        name: redis-server
        state: started
        enabled: yes

  handlers:
    - name: restart redis
      service:
        name: redis-server
        state: restarted

  tags:
    - cache
    - redis

################################################################################
# Play 5: Configure Application Servers (Docker)
################################################################################

- name: Configure application servers
  hosts: app
  become: yes

  roles:
    - docker

  tasks:
    - name: Pull application Docker image
      docker_image:
        name: "{{ docker_registry }}/{{ app_image }}:{{ app_version }}"
        source: pull
        force_source: yes

    - name: Run application container
      docker_container:
        name: operation-shadow-app
        image: "{{ docker_registry }}/{{ app_image }}:{{ app_version }}"
        state: started
        restart_policy: unless-stopped
        ports:
          - "8080:8080"
        env:
          DATABASE_URL: "postgresql://{{ app_database_user }}@{{ hostvars[groups['database'][0]]['ansible_host'] }}/{{ app_database_name }}"
          REDIS_URL: "redis://{{ hostvars[groups['cache'][0]]['ansible_host'] }}:6379"
        networks:
          - name: operation-shadow-network

    - name: Verify container is healthy
      docker_container_info:
        name: operation-shadow-app
      register: container_info
      failed_when: container_info.container.State.Status != 'running'

  tags:
    - app
    - docker

################################################################################
# Play 6: Configure Monitoring
################################################################################

- name: Configure monitoring servers
  hosts: monitoring
  become: yes

  roles:
    - monitoring

  tasks:
    - name: Deploy Prometheus configuration
      template:
        src: templates/prometheus.yml.j2
        dest: /etc/prometheus/prometheus.yml
        owner: prometheus
        group: prometheus
        mode: '0644'
      notify: restart prometheus

    - name: Deploy Grafana dashboards
      copy:
        src: files/grafana-dashboards/
        dest: /var/lib/grafana/dashboards/
        owner: grafana
        group: grafana
        mode: '0644'
      notify: restart grafana

    - name: Ensure monitoring services are running
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - prometheus
        - grafana-server
        - node_exporter

  handlers:
    - name: restart prometheus
      service:
        name: prometheus
        state: restarted

    - name: restart grafana
      service:
        name: grafana-server
        state: restarted

  tags:
    - monitoring
    - prometheus
    - grafana

################################################################################
# Play 7: Final Verification
################################################################################

- name: Verify infrastructure status
  hosts: production
  become: yes
  gather_facts: no

  tasks:
    - name: Check service status
      service_facts:

    - name: Verify connectivity
      wait_for:
        port: 22
        timeout: 10

    - name: Generate infrastructure report
      debug:
        msg: |
          ========================================
          HOST: {{ inventory_hostname }}
          IP: {{ ansible_host }}
          ROLE: {{ group_names | join(', ') }}
          STATUS: ✓ CONFIGURED
          ========================================

    - name: Log completion
      shell: echo "$(date) - {{ inventory_hostname }} configured successfully" >> /var/log/ansible-deploy.log

  tags:
    - verify
    - final

################################################################################
# Klaus's Philosophy:
#
# "This playbook describes WHAT we want, not HOW to do it.
#  That's declarative programming. That's Infrastructure as Code.
#
#  Run it once → 50 servers configured
#  Run it twice → no changes (idempotent)
#  Run it 100 times → still same result
#
#  That's power. That's Ansible."
################################################################################


