# KERNEL SHADOWS: Episode 14 — Docker Basics
# Docker Compose configuration for Operation Shadow
# Amsterdam, Netherlands (Day 27-28)
# Sophie van Dijk, Docker Architect

# TODO 1: Укажи версию Compose
# Подсказка: version: '3.8'
# 3.8 — современная версия, поддерживает все нужные features
version: '???'

services:
  # ============================================================================
  # Web Service (Nginx)
  # ============================================================================
  web:
    # TODO 2: Настрой build
    # Подсказка:
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    #
    # context — директория для build (. = текущая)
    # dockerfile — какой Dockerfile использовать
    build:
      context: ???
      dockerfile: ???

    # TODO 3: Укажи имя образа
    # Подсказка: image: operation-shadow/web:latest
    # После build, образ будет сохранён с этим именем
    image: ???

    # TODO 4: Укажи имя контейнера
    # Подсказка: container_name: shadow-web
    # Фиксированное имя контейнера (вместо случайного)
    container_name: ???

    # TODO 5: Настрой port mapping
    # Подсказка: 
    # ports:
    #   - "8080:80"
    #
    # "HOST:CONTAINER" — маппинг портов
    # 8080 на host → 80 в контейнере
    # Доступ: http://localhost:8080
    ports:
      - "???:???"

    # TODO 6: Подключи к сети
    # Подсказка:
    # networks:
    #   - shadow-network
    #
    # Контейнеры в одной сети могут общаться по имени
    networks:
      - ???

    # TODO 7: Настрой volumes
    # Подсказка:
    # volumes:
    #   - web-logs:/var/log/nginx
    #   - ./html:/usr/share/nginx/html:ro
    #
    # Named volume: web-logs сохраняет логи
    # Bind mount: ./html монтирует локальную директорию (ro = read-only)
    volumes:
      - ???
      - ???

    # TODO 8: Добавь environment переменные
    # Подсказка:
    # environment:
    #   - NGINX_HOST=localhost
    #   - NGINX_PORT=80
    environment:
      - NGINX_HOST=???
      - NGINX_PORT=???

    # TODO 9: Настрой restart policy
    # Подсказка: restart: unless-stopped
    # always — всегда перезапускать
    # unless-stopped — перезапускать если не остановлен вручную
    # on-failure — только при ошибке
    # no — не перезапускать
    restart: ???

    # TODO 10: Добавь healthcheck
    # Подсказка:
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost/health"]
    #   interval: 30s
    #   timeout: 3s
    #   retries: 3
    #   start_period: 10s
    healthcheck:
      test: ["CMD", "???", "-f", "http://localhost/???"]
      interval: ???
      timeout: ???
      retries: ???
      start_period: ???

    # TODO 11: Добавь labels (метаданные)
    # Подсказка:
    # labels:
    #   - "com.operation-shadow.episode=14"
    #   - "com.operation-shadow.location=Amsterdam"
    #   - "com.operation-shadow.service=web"
    labels:
      - "com.operation-shadow.episode=???"
      - "com.operation-shadow.location=???"
      - "com.operation-shadow.service=???"

  # ============================================================================
  # Database Service (PostgreSQL)
  # ============================================================================
  db:
    # TODO 12: Укажи готовый образ PostgreSQL
    # Подсказка: image: postgres:15-alpine
    # Используем готовый образ (не build свой)
    # 15 — версия PostgreSQL, alpine — минимальный размер
    image: ???

    # TODO 13: Укажи имя контейнера
    # Подсказка: container_name: shadow-db
    container_name: ???

    # TODO 14: Подключи к той же сети
    # Подсказка: 
    # networks:
    #   - shadow-network
    networks:
      - ???

    # TODO 15: Настрой volume для данных
    # Подсказка:
    # volumes:
    #   - db-data:/var/lib/postgresql/data
    #
    # Named volume для persistent storage
    # Данные сохранятся даже после удаления контейнера
    volumes:
      - ???

    # TODO 16: Добавь environment для PostgreSQL
    # Подсказка:
    # environment:
    #   - POSTGRES_DB=operation_shadow
    #   - POSTGRES_USER=shadow_user
    #   - POSTGRES_PASSWORD=change_me_in_production
    #
    # ВАЖНО: В production НЕ хардкодь пароли!
    # Используй Docker secrets или environment файлы
    environment:
      - POSTGRES_DB=???
      - POSTGRES_USER=???
      - POSTGRES_PASSWORD=???  # TODO: Изменить на production пароль!

    # TODO 17: Настрой restart policy
    # Подсказка: restart: unless-stopped
    restart: ???

    # TODO 18: Добавь healthcheck для PostgreSQL
    # Подсказка:
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U shadow_user -d operation_shadow"]
    #   interval: 30s
    #   timeout: 5s
    #   retries: 5
    #
    # pg_isready — команда PostgreSQL для проверки готовности
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ??? -d ???"]
      interval: ???
      timeout: ???
      retries: ???

    # TODO 19: Добавь labels
    # Подсказка:
    # labels:
    #   - "com.operation-shadow.episode=14"
    #   - "com.operation-shadow.service=database"
    labels:
      - "com.operation-shadow.episode=???"
      - "com.operation-shadow.service=???"

# ============================================================================
# Networks
# ============================================================================
# TODO 20: Определи сеть
# Подсказка:
# networks:
#   shadow-network:
#     driver: bridge
#     name: operation-shadow-network
#
# bridge — стандартный драйвер для локальных сетей
# Контейнеры в одной bridge сети могут общаться по имени
networks:
  ???:
    driver: ???
    name: ???

# ============================================================================
# Volumes (persistent storage)
# ============================================================================
# TODO 21: Определи volumes
# Подсказка:
# volumes:
#   web-logs:
#     name: shadow-web-logs
#   db-data:
#     name: shadow-db-data
#
# Named volumes управляются Docker
# Данные сохраняются в /var/lib/docker/volumes/
volumes:
  ???:
    name: ???
  ???:
    name: ???

# ============================================================================
# СПРАВКА: Как использовать после заполнения TODO
#
# 1. Build и запуск всех сервисов:
#    docker-compose up -d
#    # -d = detached mode (в фоне)
#
# 2. Проверка статуса:
#    docker-compose ps
#
# 3. Просмотр логов:
#    docker-compose logs -f web
#    docker-compose logs -f db
#    docker-compose logs -f        # все сервисы
#
# 4. Остановка:
#    docker-compose stop
#
# 5. Остановка и удаление:
#    docker-compose down
#
# 6. Удаление с volumes:
#    docker-compose down -v
#    # ОСТОРОЖНО: удалит все данные!
#
# 7. Rebuild после изменений Dockerfile:
#    docker-compose up -d --build
#
# 8. Проверка healthcheck:
#    docker inspect shadow-web | grep -A 10 Health
#    docker inspect shadow-db | grep -A 10 Health
#
# 9. Подключение к контейнеру:
#    docker-compose exec web sh
#    docker-compose exec db psql -U shadow_user -d operation_shadow
#
# 10. Просмотр использования ресурсов:
#     docker-compose stats
#
# ============================================================================
# ВОПРОСЫ ДЛЯ ПОНИМАНИЯ:
#
# 1. В чём разница между docker-compose up и docker-compose start?
#    → up — создаёт и запускает контейнеры (если не существуют)
#    → start — запускает существующие остановленные контейнеры
#
# 2. Зачем networks?
#    → Изолирует контейнеры от других проектов
#    → Позволяет общаться по имени (web → db через shadow-network)
#
# 3. В чём разница между named volumes и bind mounts?
#    → Named volumes: управляются Docker (/var/lib/docker/volumes/)
#    → Bind mounts: монтируют директории с host (./html)
#    → Named volumes — для данных, bind mounts — для development
#
# 4. Зачем restart: unless-stopped?
#    → Автоматически перезапускает контейнеры после краша
#    → unless-stopped — не перезапускает если остановлен через docker stop
#
# 5. Как контейнеры общаются между собой?
#    → Через сеть (networks)
#    → web может подключиться к db через имя: postgresql://db:5432
#    → Docker DNS резолвит "db" в IP адрес контейнера
#
# 6. Зачем depends_on?
#    → Определяет порядок запуска
#    → web depends_on db — запустит db перед web
#    → НЕ ждёт готовности! Только порядок запуска
#
# 7. Что происходит с данными при docker-compose down?
#    → Контейнеры удаляются
#    → Named volumes остаются (данные сохраняются)
#    → docker-compose down -v — удалит volumes тоже
#
# 8. Зачем labels?
#    → Метаданные для организации
#    → Можно фильтровать: docker ps --filter label=com.operation-shadow.episode=14
#
# ============================================================================
# Docker Compose Best Practices (Sophie's notes):
#
# ✅ DO:
# - Используй version '3.8' (современная)
# - Определяй networks для изоляции
# - Используй named volumes для persistent data
# - Добавляй healthcheck для всех сервисов
# - Используй restart: unless-stopped в production
# - Добавляй labels для организации
# - Используй .env файл для переменных
# - Никогда не храни пароли в docker-compose.yml!
#
# ❌ DON'T:
# - НЕ используй latest tag в production (pin версии)
# - НЕ храни sensitive data в YAML (используй secrets)
# - НЕ используй depends_on как "wait-for" (он не ждёт готовности)
# - НЕ запускай все сервисы от root
# - НЕ забывай про resource limits (memory, cpu)
#
# ============================================================================
# Docker Compose vs Docker Run:
#
# docker run (ручной способ):
# docker run -d -p 8080:80 --name web --network mynet -v logs:/var/log nginx
# docker run -d --name db --network mynet -e POSTGRES_PASSWORD=pass postgres
#
# docker-compose (декларативный способ):
# docker-compose up -d
#
# Преимущества Compose:
# ✓ Декларативная конфигурация (YAML)
# ✓ Управление несколькими контейнерами одной командой
# ✓ Автоматическое создание networks и volumes
# ✓ Версионируется в git
# ✓ Проще для команды (документация как код)
#
# ============================================================================
# Networking в Docker Compose:
#
# Без явной сети:
# web → db
# Docker создаст сеть автоматически (имя: <project>_default)
#
# С явной сетью:
# networks:
#   shadow-network:
#
# Контейнеры общаются по имени сервиса:
# - web может подключиться к db через имя "db"
# - postgresql://db:5432/operation_shadow
# - http://web/health
#
# ============================================================================
# Volume Types:
#
# 1. Named Volume (managed by Docker):
# volumes:
#   - db-data:/var/lib/postgresql/data
#
# 2. Bind Mount (host directory):
# volumes:
#   - ./html:/usr/share/nginx/html
#
# 3. tmpfs (in-memory, не сохраняется):
# tmpfs:
#   - /tmp
#
# Когда использовать:
# - Named volumes: production данные (database, logs)
# - Bind mounts: development (live reload кода)
# - tmpfs: временные данные (cache, session)
#
# ============================================================================
# Sophie van Dijk: "Docker Compose — это оркестр. Каждый сервис — музыкант.
#                   YAML — это ноты. docker-compose up — начало концерта."
# ============================================================================

