# KERNEL SHADOWS: Episode 14 â€” Docker Basics
# Multi-stage Dockerfile for optimized builds
# Example: Building a Node.js application with minimal final image
# Amsterdam, Netherlands (Day 27-28)

# ============================================================================
# Stage 1: Build stage
# ============================================================================
FROM node:18-alpine AS builder

LABEL stage=builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install ALL dependencies (including devDependencies)
RUN npm ci

# Copy application source
COPY . .

# Build application (if using TypeScript, React, etc.)
RUN npm run build

# Run tests (optional, can fail the build)
# RUN npm test

# ============================================================================
# Stage 2: Production stage
# ============================================================================
FROM nginx:alpine AS production

LABEL maintainer="max@operation-shadow.net" \
      version="1.0" \
      description="Multi-stage optimized Docker image" \
      episode="14" \
      build-method="multi-stage"

# Install curl for healthcheck
RUN apk add --no-cache curl

# Copy ONLY the built application from builder stage
# This excludes node_modules, source code, tests, etc.
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY configs/nginx.conf /etc/nginx/nginx.conf

# Create non-root user
RUN addgroup -S nginx && adduser -S nginx -G nginx && \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

USER nginx

EXPOSE 80

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/health || exit 1

CMD ["nginx", "-g", "daemon off;"]

# ============================================================================
# Benefits of multi-stage builds:
# ============================================================================
# 1. Smaller final image (no build tools, no dev dependencies)
# 2. Security (no source code, no build artifacts in production image)
# 3. Faster deployment (smaller image = faster push/pull)
# 4. Clear separation of build vs runtime
#
# Example size comparison:
# - Single-stage: 500MB (includes node_modules, build tools)
# - Multi-stage: 50MB (only nginx + static files)
#
# 10x reduction in image size! ðŸš€


