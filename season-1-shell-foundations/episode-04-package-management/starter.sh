#!/bin/bash

################################################################################
# OPERATION KERNEL SHADOWS
# Episode 04: Package Management
# Script: starter.sh (Type B Template)
#
# Mission: Generate installation report
# Author: Max Sokolov (Student Template)
# Date: 7 октября 2025
#
# Description:
#   Type B episode: 95% apt/dpkg commands, 5% bash
#
#   ВАЖНО: Это НЕ скрипт для УСТАНОВКИ пакетов!
#   Для установки используй apt команды напрямую:
#
#   sudo apt update
#   sudo apt install nmap tcpdump htop ...
#
#   Этот скрипт ТОЛЬКО для генерации отчёта в конце.
################################################################################

set -euo pipefail

# === CONFIGURATION ===

TOOLS_FILE="${1:-artifacts/required_tools.txt}"
REPORT_FILE="install_report.txt"

# === TODO 1: Validate input file ===
# Проверь что файл существует
# Подсказка: if [[ ! -f "$TOOLS_FILE" ]]; then

# TODO: Твой код здесь


# === TODO 2: Start report generation ===
# Открой блок { } для записи в файл
# Всё внутри {} будет записано в $REPORT_FILE
# Подсказка: { ... } > "$REPORT_FILE"

{
  # === TODO 3: Header ===
  # Создай красивый header с:
  # - Заголовок "PACKAGE INSTALLATION REPORT"
  # - Дата: $(date '+%d %B %Y, %H:%M')
  # - System info: $(lsb_release -ds)
  # - Kernel: $(uname -r)
  # - Architecture: $(dpkg --print-architecture)

  echo "═══════════════════════════════════════════════════════════════"
  echo "           PACKAGE INSTALLATION REPORT"
  echo "═══════════════════════════════════════════════════════════════"
  echo ""

  # TODO: Добавь date, system info, kernel, architecture


  echo ""
  echo "───────────────────────────────────────────────────────────────"
  echo "INSTALLED PACKAGES FROM required_tools.txt"
  echo "───────────────────────────────────────────────────────────────"
  echo ""

  # === TODO 4: Process each package ===
  # Прочитай файл построчно с while read
  # Подсказка: while read -r pkg; do ... done < "$TOOLS_FILE"

  while read -r pkg; do
    # === TODO 5: Skip comments and empty lines ===
    # Пропусти строки начинающиеся с # и пустые
    # Подсказка: [[ "$pkg" =~ ^#.*$ || -z "$pkg" ]] && continue

    # TODO: Твой код здесь


    # === TODO 6: Check if package installed ===
    # Используй dpkg для проверки: dpkg -l "$pkg" 2>/dev/null | grep -q "^ii"
    # Если установлен (статус "ii"):
    #   - Получи version: dpkg -l "$pkg" | grep "^ii" | awk '{print $3}'
    #   - Получи repo: apt-cache policy "$pkg" | grep -A 1 "Installed:" | tail -1 | awk '{print $2}'
    #   - Выведи: ✓ $pkg, Version: $version, Repository: $repo
    # Если НЕ установлен:
    #   - Выведи: ✗ $pkg — NOT INSTALLED

    # TODO: Твой код здесь
    # Пример структуры:
    # if dpkg -l "$pkg" 2>/dev/null | grep -q "^ii"; then
    #   version=$(...)
    #   repo=$(...)
    #   echo "  ✓ $pkg"
    #   echo "    Version: $version"
    #   echo "    Repository: $repo"
    #   echo ""
    # else
    #   echo "  ✗ $pkg — NOT INSTALLED"
    #   echo ""
    # fi


  done < "$TOOLS_FILE"

  echo "───────────────────────────────────────────────────────────────"
  echo "STATISTICS"
  echo "───────────────────────────────────────────────────────────────"
  echo ""

  # === TODO 7: Total packages in system ===
  # Посчитай все установленные пакеты
  # Подсказка: dpkg -l | grep "^ii" | wc -l

  total_system=0  # TODO: Замени на реальный подсчёт
  echo "Total packages in system: $total_system"

  # === TODO 8: Packages from required list ===
  # Посчитай сколько пакетов из required_tools.txt установлено
  # Подсказка: while read loop + счётчик

  installed_count=0
  # TODO: Посчитай установленные из списка

  required_count=$(grep -v "^#" "$TOOLS_FILE" | grep -v "^$" | wc -l)
  echo "Packages from required list: $installed_count / $required_count"

  # === TODO 9: Disk usage ===
  # Покажи размер apt cache
  # Подсказка: du -sh /var/cache/apt/archives/

  cache_size="N/A"  # TODO: Получи реальный размер
  echo "Disk usage (apt cache): $cache_size"
  echo ""

  # === TODO 10: Footer ===
  echo "═══════════════════════════════════════════════════════════════"
  echo "                      END OF REPORT"
  echo "═══════════════════════════════════════════════════════════════"
  echo ""
  echo "Generated by: Max Sokolov"
  echo "For: Viktor Petrov (OPERATION KERNEL SHADOWS)"

} > "$REPORT_FILE"

# === TODO 11: Show result ===
echo "✓ Report saved: $REPORT_FILE"
echo ""
echo "Preview:"
echo "───────────────────────────────────────────────────────────────"
cat "$REPORT_FILE"

################################################################################
# ПОДСКАЗКИ:
#
# 1. dpkg -l "$pkg" | grep "^ii" — проверить статус пакета (ii = installed)
# 2. awk '{print $3}' — взять 3-ю колонку (version)
# 3. apt-cache policy — показать откуда установлен пакет
# 4. while read -r pkg; do ... done < file — читать построчно
# 5. [[ "$var" =~ ^# ]] — проверить начинается ли с #
# 6. 2>/dev/null — подавить ошибки
#
# Смотри README.md → Цикл 7 для примеров!
################################################################################
